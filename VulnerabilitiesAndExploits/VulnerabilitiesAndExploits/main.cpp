#include <iostream>
using namespace std;

/*************************************
 * ARRAY VULNERABILTY
 * 1. There must be an array and an array index variable
 * 2. The array index variable must be reachable through external input.
 * 3. There must not be bounds checking on the array index variable.
 ****************************************/
void arrayVulnerability(int * arr, int index)
{
   
   for (int i = 0; i < index; i++)
   {
	  cout << arr[i];
   }
   cout << "\n";
}

/**************************************
 * ARRAY WORKING
 * Call arrayVulnerability() in a way that does
 * not yield unexpected behavior
 *************************************/
void arrayWorking(/* parameters with malicious data */)
{
   int arr[4] = { 0, 1, 2, 3};
   int index = 4;
   cout << "Display array working:\n";
   arrayVulnerability(arr, index);
}

/**************************************
 * ARRAY EXPLOIT
 * 1. The attacker provides an array index value outside the expected range
 * 2. The attacker must be able to provide input or redirect
 *    existing input into the array at the index he provided
 * 3. The injected value must alter program state in a way
 *    that is desirable to the attacker
 *************************************/
void arrayExploit()
{
   int index = 5;
   int arr[4] = { 0, 1, 2, 3};
   cout << "Display array expoit:\n";
   arrayVulnerability(arr, index);
}

/*************************************
 * ARC VULNERABILITIES
 * --ADD CONDITIONS
 ****************************************/
void arcVulnerability(/* parameters with malicious data */)
{
}

/**************************************
 * ARC WORKING
 * Call arcWorking() in a way that does
 * not yield unexpected behavior
 *************************************/
void arcWorking(/* parameters with non- malicious data */)
{
}

/**************************************
 * ARC EXPLOIT
 * --ADD INFO
 *************************************/
void arcExploit()
{
}

/*************************************
 * VTABLE VULNERABILITIES
 * --ADD CONDITIONS
 ****************************************/
void vTableVulnerability(/* parameters with malicious data */)
{
}

/**************************************
 * VTABLE WORKING
 * Call vTableWorking() in a way that does
 * not yield unexpected behavior
 *************************************/
void vTableWorking(/* parameters with non- malicious data */)
{
}

/**************************************
 * VTABLE EXPLOIT
 * --ADD INFO
 *************************************/
void vTableExploit()
{
}

/*************************************
 * STACK VULNERABILITIES
 * --ADD CONDITIONS
 ****************************************/
void stackVulnerability(/* parameters with malicious data */)
{
}

/**************************************
 * STACK WORKING
 * Call stackWorking() in a way that does
 * not yield unexpected behavior
 *************************************/
void stackWorking(/* parameters with non- malicious data */)
{
}

/**************************************
 * STACK EXPLOIT
 * --ADD INFO
 *************************************/
void stackExploit()
{
}

/*************************************
 * HEAP VULNERABILITIES
 * --ADD CONDITIONS
 ****************************************/
void heapVulnerability(/* parameters with malicious data */)
{
}

/**************************************
 * HEAP WORKING
 * Call stackWorking() in a way that does
 * not yield unexpected behavior
 *************************************/
void heapWorking(/* parameters with non- malicious data */)
{
}

/**************************************
 * HEAP EXPLOIT
 * --ADD INFO
 *************************************/
void heapExploit()
{
}

/*************************************
 * INT VULNERABILITIES
 * --ADD CONDITIONS
 ****************************************/
void intVulnerability(/* parameters with malicious data */)
{
}

/**************************************
 * INT WORKING
 * Call intWorking() in a way that does
 * not yield unexpected behavior
 *************************************/
void intWorking(/* parameters with non- malicious data */)
{
}

/**************************************
 * INT EXPLOIT
 * --ADD INFO
 *************************************/
void intExploit()
{
}

/*************************************
 * ANSI VULNERABILITIES
 * --ADD CONDITIONS
 ****************************************/
void ansiVulnerability(/* parameters with malicious data */)
{
}

/**************************************
 * ANSI WORKING
 * Call ansiWorking() in a way that does
 * not yield unexpected behavior
 *************************************/
void ansiWorking(/* parameters with non- malicious data */)
{
}

/**************************************
 * ANSI EXPLOIT
 * --ADD INFO
 *************************************/
void ansiExploit()
{
}


int main(int argc, const char * argv[])
{
   //Selene
   arrayWorking();
   arrayExploit();
   //arcWorking();
   //arcExploit();
   
   //Leandro
   //vTableWorking();
   //vTableExploit();
   //stackWorking();
   //stackExploit();
   
   //Landon
   //heapWorking();
   //heapExploit();
   
   //Jaron
   //integerWorking();
   //integerExploit();
   //ansiWorking();
   //ansiExploit();
   
   return 0;
}
